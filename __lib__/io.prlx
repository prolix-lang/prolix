class io {
    require "classes/io.class";
    
    "Open the file and set it as a current working file
    so you can use other functions to affect or edit the
    file."
    $open $open;

    "If there is a current working file, that file will
    be exited and the system will automatically switch
    to writing or reading mode in the terminal."
    $close $close;

    "Write text into the terminal (or it can be called
    print) or if there is a current working file, write
    text over the file."
    $write $write;

    "Write bytes to the terminal, or if there is an
    active file, write bytes to the file."
    $writebytes $writebytes;

    "It has the same feature of writing text and strings
    but it uses internal to write files so it is not
    limited unlike `$write`."
    $buffwrite $buffwrite;

    "Similar to how `$write` works, but it writes text
    next to words or data in the current working file."
    $append $append;

    "Like `$append` but it uses an internal buffer to
    write directly to the file making it unlimited
    in data."
    $buffappend $buffappend;

    "Reads data from the user and receives the characters
    the user enters, but if there is a current working
    file, reading the characters is limited and fixed."
    $read $read;

    "Reads all data from the user and gets bytes instead
    of characters (strings) entered by the user, but if
    there is an active file, reads all bytes and returns
    type bytes."
    $readbytes $readbytes;

    "Like `$read` but when reading files it is unlimited
    and reads up to the limit of strings from Java data
    types."
    $buffread $buffread;
}