'
JSON (JavaScript Object Notation) <https://json.org> is a subset of
JavaScript (ECMA-262 3rd edition) syntax is used as lightweight data
exchange form.

Basic example of encoding `table` into JSON string

    require json
    $table (
        "1" 123;
        "x" true;
        "key" "cool";
    );

    $jsonStr [json.encode : $table];
    $print : $jsonStr; # Expected output: {"1":123,"x":true,"key":"cool"}

Basic example of decoding JSON into Prolix `table`

    require json table;

    $jsonStr "{\"key\": 5, \"x\": 100, \"pi\": 3.14}";
    $table [json.decode : $jsonStr];
    $print : [table.get : $table "pi"]; # Expected output: 3.14
'

class json {
    require "classes/json.class";

    "
    @desc
    Converts Prolix objects to JSON and will return
    `none` if there is a problem with your object
    such as the object's key must be a string or an
    array from a table (in order).

    @mistakes
    `return none` - Entry key is non-str type
    `return none` - Invalid array
    `return none` - Unknown object
    "
    $encode $encode;

    "
    @desc
    Converting a JSON string (or an object written
    and condensed into a string) to the correct
    object with Prolix will sometimes cause
    confusion and return the value none because of
    an error.

    @mistakes
    `return none` - Invalid JSON syntax
    `return none` - Missing or invalid type
    "
    $decode $decode;
}