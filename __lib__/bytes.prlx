'
The `bytes` module performs serialization andde-serialization
of Prolix object structures.

The default serialization mechanism for an object records the
java class object, class signature, and the values ​​of all
non-transient and non-static fields. References to other
objects (except in temporary or static fields) cause those
objects to be written as well. Multiple references to an object
are encoded using a reference sharing mechanism so that the
objects graphs can be restored to the same shape as when the
original was written.

For example to encode an object

    require bytes;
    $array (1; 2; 3; 5; 10);
    $bytes [bytes.encode : $array]; # Data type: bytes

Example of decoding an object

    $bytes ...; # Bytes from above example
    $decodedArray [bytes.decode : $bytes]; # Expected object: table


Prolix, a language built upon Java robustness, provides
developers with efficient tools to convert objects into
bytes seamlessly. Leveraging Java serialization mechanisms,
Prolix bridges high-level abstraction with low-level byte
manipulation, ensuring reliable and performant data transformation.
These utilities empower developers to encode complex data
structures and facilitate seamless object marshaling across
distributed systems, fostering productivity and innovation
in software development.
'

class bytes {
    require "classes/bytes.class";

    "Convert Prolix objects or unknown objects (Prolix objects
    are converted from Java) into bytes"
    $encode $encode;

    "Converting the bytes back into the same object but may
    encounter some data loss problems"
    $decode $decode;
}